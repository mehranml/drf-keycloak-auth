variables:
  PY_VERSION: "3.10"
  PY_IMAGE: "python:${PY_VERSION}"

include:
  - project: 'ecocommons-australia/operational-notes-and-scripts/ci-pipelines'
    file: '/v1/.supported_ci_api.yml'
    ref: main

stages:
  - trigger
  - static analysis
  - bootstrap
  - unit test
  - build base
  - build
  - test
  - sonar
  - publish

check dependencies:
  stage: static analysis
  image: "${PY_IMAGE}"
  before_script:
    - ./setup.py install
    - pip install safety
  script:
    - safety check
  # https://gitlab.com/gitlab-org/gitlab/-/issues/194129
  rules:
    - if: '$CI'

prospector:
  stage: static analysis
  image: "${PY_IMAGE}"
  before_script:
    - ./setup.py install
    - pip install prospector==1.7.7 pylint==2.14.5
  script:
    - prospector .
  rules:
    - exists:
      - .prospector.yaml
      when: on_success
    - when: never

venv:
  stage: bootstrap
  image: "${PY_IMAGE}"
  script:
    - make install-dependencies
  artifacts:
    when: on_success
    expire_in: 1 hour
    paths:
      - venv/
  only:
    refs:
      - tags
      - master

unit test:
  stage: unit test
  image: "${PY_IMAGE}"
  variables:
    PYTHONDONTWRITEBYTECODE: 1
    DEBUG: 1
    DJANGO_ALLOWED_HOSTS: ".dev.ecocommons.org.au localhost 127.0.0.1 [::1]"
    KEYCLOAK_SERVER_URL: https://auth.dev.ecocommons.org.au/auth/
    KEYCLOAK_REALM: ecocommons-foobar
    KEYCLOAK_CLIENT_ID: SECURE
    KEYCLOAK_CLIENT_SECRET_KEY: SECURE
    KEYCLOAK_MULTI_OIDC_JSON: SECURE
    EC_TEST_USERNAME: SECURE
    EC_TEST_PASSWORD: SECURE
    USER_TEST_USERNAME: SECURE
    USER_TEST_PASSWORD: SECURE
  script:
    - ./setup.py install
    - python -m pip install coverage
    - coverage run --source='./' ./manage.py test testapp ${TEST_ARGS}
    - coverage report -m
    - coverage xml
  allow_failure: false
  artifacts:
      when: always
      reports:
        junit: xunit-reports/*.xml
      paths:
        - coverage.xml
        - xunit-reports/**
      expire_in: 1 week
  # https://gitlab.com/gitlab-org/gitlab/-/issues/194129
  rules:
    - if: '$CI'
    
build:
  stage: build
  image: "${PY_IMAGE}"
  script:
    - make
  dependencies:
    - venv
  artifacts:
    when: on_success
    expire_in: 6 mos
    paths:
      - dist/
  only:
    refs:
      - tags
      - master

pypi:
  stage: publish
  image: "${PY_IMAGE}"
  variables:
    TWINE_USERNAME: ${TWINE_USERNAME}
    TWINE_PASSWORD: ${TWINE_PASSWORD}
  script:
    - make publish-pypi
  only:
    refs:
      - tags

sonarqube-check:
  extends: .sonarqube-check
